function [F, M] = controller(t, state, des_state, params)
%CONTROLLER  Controller for the quadrotor
%
%   state: The current state of the robot with the following fields:
%   state.pos = [x; y; z], state.vel = [x_dot; y_dot; z_dot],
%   state.rot = [phi; theta; psi], state.omega = [p; q; r]
%
%   des_state: The desired states are:
%   des_state.pos = [x; y; z], des_state.vel = [x_dot; y_dot; z_dot],
%   des_state.acc = [x_ddot; y_ddot; z_ddot], des_state.yaw,
%   des_state.yaw_dot
%
%   params: robot parameters

%   Using these current and desired states, you have to compute the desired
%   controls


% =================== Your code goes here ===================
kpx = 0;
kdx = 0;

kpy = 0;
kdy = 0;

kdz = 20;
kpz = 100;

kp_phi = 0;
kd_phi = 0;

kp_theta = 0;
kd_theta = 0;

kp_psi = 0;
kd_psi = 0;


% Thurst
F = params.mass*(params.gravity +des_state.acc(3)+kdz*(des_state.vel(3)-state.vel(3))+kpz*(des_state.pos(3)-state.pos(3)));

% Moment
M = zeros(3,1);

r1dd = des_state.acc(1)+kdx*(des_state.vel(1)-state.vel(1))+kpx*(des_state.pos(1)-state.pos(1));
r2dd = des_state.acc(2)+kdy*(des_state.vel(2)-state.vel(2))+kpy*(des_state.pos(2)-state.pos(2));

phi_des   = 1/params.gravity*(r1dd*sin(des_state.yaw) - r2dd*cos(des_state.yaw));
theta_des = 1/params.gravity*(r1dd*cos(des_state.yaw) + r2dd*sin(des_state.yaw));
p_des = 0; 
q_des = 0;
psi_des = des_state.yaw;
r_des   = des_state.yaw_dot;

M(1,1) = kp_phi  * (phi_des   - state.rot(1)) + kd_phi*   (p_des - state.omega(1));
M(2,1) = kp_theta* (theta_des - state.rot(2)) + kd_theta* (q_des - state.omega(2));
M(3,1) = kp_psi  * (psi_des   - state.rot(3)) + kd_psi*   (r_des - state.omega(3));

% =================== Your code ends here ===================

end
